#!venv/bin/python3

"""
Generate the markdown documents that list all the Heimdall codes and messages.

This document is more easily shared than the codes CSV.

Usage:
    generate_messages_markdown [options]

Options:
    --doc-folder=<path>   The path to the folder to generate the English and French documents. [default: {doc_folder}]
    
    --verbose
    -h --help   Show this description.
"""

import os.path

from datetime import datetime
from constants import DOC_FOLDER, HEIMDALL_CODES_DOC_EN, HEIMDALL_CODES_DOC_FR
from heimdall import heimdall_message_manager
from utilities.docopt import docopt

language_to_path={"en":HEIMDALL_CODES_DOC_EN,
                  "fr":HEIMDALL_CODES_DOC_FR}

def get_template(language):
    en="""{language_markdown}

# Heimdall Message Codes

This page lists all Heimdall codes and messages. See also the [Heimdall README](https://gitlab.science.gc.ca/CMOI/maestro/blob/integration/src/python3/HEIMDALL.md).

{codes}

# Generated Page

This page was generated by the '{script_name}' script from the repo '{repo}' on '{now}'.
"""
    
    fr="""{language_markdown}

# Heimdall Codes de Message

Cette page liste tous les codes et messages Heimdall. Voir aussi le [Heimdall README](https://gitlab.science.gc.ca/CMOI/maestro/blob/integration/src/python3/HEIMDALL.md).

{codes}

# Page Générée

Cette page a été générée par le script '{script_name}' du repo '{repo}' le '{now}'.
"""
    
    return en if language=="en" else fr

def get_markdown(language,char_to_image):
    
    language_labels={"en":"English","fr":"Français"}
    other_language="en" if language=="fr" else "fr"
    basename=os.path.basename(language_to_path[other_language])
    language_path="../%s/%s"%(other_language,basename)
    language_markdown="[(%s)](%s)"%(language_labels[other_language],language_path)
    
    now=datetime.now().strftime("%Y-%m-%d")
    repo="https://gitlab.science.gc.ca/CMOI/maestro"
    codes=get_markdown_codes_section(language,char_to_image)
    content=get_template(language).format(script_name=os.path.basename(__file__),
                           now=now,
                           codes=codes,
                           repo=repo,
                           language_markdown=language_markdown)
    
    return content

def get_markdown_codes_section(language,char_to_image):
    
    levels="cewib"
    
    if language=="en":
        prefix="Level: "
        char_to_label={"c":prefix+"Critical",
                       "e":prefix+"Error",
                       "w":prefix+"Warning",
                       "i":prefix+"Info",
                       "b":prefix+"Best practice"}
    else:    
        prefix="Niveau: "
        char_to_label={"c":prefix+"Critique",
                       "e":prefix+"Erreur",
                       "w":prefix+"Avertissment",
                       "i":prefix+"Info",
                       "b":prefix+"Meilleures pratiques"}
    
    hmm=heimdall_message_manager
    
    def code_sort(code):
        return levels.index(code[0])*1000000+int(code[1:])        
    sorted_codes=sorted(hmm.codes,key=code_sort)
    
    chunks=[]
    previous_image=""
    for code in sorted_codes:
        label=hmm.get_csv_value_or_default(code,"label",language)
        description=hmm.get_csv_value_or_default(code,"description",language)
        url=hmm.get_csv_value_or_default(code,"url",language)
        c=code[0]
        image="![color %s image](%s)"%(c,char_to_image[c])
        
        chunk=""
        
        if image!=previous_image:
            chunk+="\n"+previous_image
            chunk+="\n\n# "+char_to_label[c]
            
        chunk+="""
{image}

### [{code}](#{code}): {label}

{description}
""".format(code=code,label=label,image=image,description=description)
        if url.strip():
            more="[More info](%s)" if language=="en" else "[Plus d'info](%s)"
            chunk+="\n\n"+more%url+"\n"
        
        
        previous_image=image
        
        chunks.append(chunk)
        
    chunks.append(image)
    
    return "\n\n".join(chunks)

def generate_markdown(doc_folder,verbose=False):
    
    if not doc_folder.endswith("/"):
        doc_folder+="/"
        
    language_to_folder={"en":doc_folder+"en/",
                        "fr":doc_folder+"fr/"}

    image_path="../color-%s.png"
    char_to_image={"c":image_path%"critical",
                   "e":image_path%"error",
                   "w":image_path%"warning",
                   "i":image_path%"info",
                   "b":image_path%"best-practice"}
    
    "sanity check: the relative paths to the code images exist relative to doc folders."
    for path in char_to_image.values():
        required=language_to_folder["en"]+path
        assert os.path.exists(required), "required path = '%s'"%required
        
    for language,folder in language_to_folder.items():
            
        if not os.path.exists(folder):
            os.makedirs(folder)
                
        text=get_markdown(language,char_to_image)
        basename=os.path.basename(language_to_path[language])
        path=folder+basename
        with open(path,"w") as f:
            f.write(text)
        if verbose:
            print("Wrote to file '%s'"%path)
    
def main(args):
    generate_markdown(args["--doc-folder"],
                      verbose=args["--verbose"])

if __name__ == "__main__":
    doc=__doc__.format(doc_folder=DOC_FOLDER)
    
    args = docopt(doc, version="1.0")
    main(args)
