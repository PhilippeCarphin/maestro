#!/bin/ksh
#
# name: nodetracer
#
# author: CMOIS
#
# description: saves the output of a node 
#
# usage: nodetracer -n node [-l loopargs] -type [success,abort] -d datestamp -i input_file  -takes input file and places it in the right place in the experiment for node n
#        nodelister -h                                                                      -shows help

Usage="
Nodetracer  \n 
\n
\t     Saves the listing of a node onto its proper position in the experiment \n
\n
\t     Usage: nodetracer -n node [-l loopargs] [-type [success,abort]] -i infile -d datestamp\n 
\n
\t\t        Where: \n
\t\t\t          node is the full node name. ex: /regional/assimilation/00/gen_cutoff \n
\t\t\t          loopargs is the comma-separated list of loop arguments. ex. outer_loop=1,inner_loop=2\n
\t\t\t          type defines whether to get the latest succesfull or aborted listing. Default is success.\n
\t\t\t          infile is the input listing file.\n
\t\t\t          datestamp is the experiment datestamp value (YYYYMMDDhhmmss).\n
\n
\t     Ex: \n
\t\t       nodelister -h                                                       - shows help\n
\t\t       nodelister -n node -type [success,abort] -i infile                  - saves infile's content into the (sucessful, abort) listing directory for the node\n
\n
\t     SEQ_EXP_HOME=$SEQ_EXP_HOME\n"

arguments=$*

eval `cclargs_lite $0 \
  -n        ""                    ""                   "[Node         ]" \
  -h        ""                    ""                   "[Display help       ]" \
  -type     "success"             "success"            "[Show latest successful or aborted listing?  ]" \
  -l        ""                    ""                   "[Loop argument list ]" \
  -i        ""                    ""                   "[Input listing to file    ]" \
  -d        ""                    ""                   "[datestamp value]" \
  ++ $arguments`

if [ ! -d "${SEQ_EXP_HOME}" ]; then
   echo "nodetracer error: Invalid path SEQ_EXP_HOME=$SEQ_EXP_HOME"
   exit 1
fi

if [[ -n "${SEQ_BIN}" ]] ; then
   nodeinfo=${SEQ_BIN}/nodeinfo
else
   nodeinfo=$(which nodeinfo)
fi

if [[ $n == "" ]]; then
    echo "Node must be defined"
    exit 1
fi

if [[ $d == "" ]]; then
    echo "Datestamp must be defined"
    exit 1
fi
datestamp=${d}

if [[ $l != "" ]]; then
   fullnode=`$nodeinfo -n $n -l $l -f node`
   fullnode=`echo $fullnode | cut -d "=" -f2`
   if [[ $fullnode = "" ]]; then
       echo nodeinfo reported a problem - exiting.
       exit 1
   fi
else
   fullnode=$n
fi

basedir=${SEQ_EXP_HOME}
compress=true

if [ "$type" = "abort" -o "$type" = "success" ]; then
   dest=$basedir/listings/$TRUE_HOST/$fullnode.$type
else
   echo "type must be success or abort"
   exit 1
fi

#create listing
dest_leaf="${dest##*/}"
dest_dir="${dest%/${dest_leaf}}"
time_dest=${dest}.${datestamp}.`date +%T`
rm -f $time_dest
mkdir -p $dest_dir 

#compress listing? 
if [[ -f $HOME/.maestrorc ]] ; then 
    [[ -n $SEQ_GETDEF_DISABLED ]] && unset SEQ_GETDEF_DISABLED
    compress=`getdef $HOME/.maestrorc compress_listing` 2> /dev/null 
fi 

if [[ "$compress" == "false" ]] ; then
    mv $i $time_dest
else
    gzip -9 -c $i > $time_dest
fi
chmod 664 $time_dest

#create reference to listing
latest_dir=$basedir/listings/latest/
nodeleaf="${fullnode##*/}"
nodebranch="${fullnode%/${nodeleaf}}"
mkdir -p ${latest_dir}/$nodebranch
rm -f $latest_dir/${fullnode}.${datestamp}.$type@*
ln -s $time_dest $latest_dir/$fullnode.${datestamp}.$type@$TRUE_HOST

if [[ "$type" != "success" && "$SEQ_ABORT_EMAILS" != "" ]]; then
  echo "To get the abort listing: \n1) Load maestro's ssm package\n2) Run commands:\n\texport SEQ_EXP_HOME=$SEQ_EXP_HOME \n\t$SEQ_UTILS_BIN/nodelister -f $time_dest"  |Mail -s "ABORT: nodename=$fullnode exp=$SEQ_EXP_HOME date=$SEQ_DATE" $SEQ_ABORT_EMAILS
fi

