#!/bin/ksh
#CMOI_LEVEL usr
#CMOI_PLATFORM op_f

eval 
arch=`uname -s`
if [[ "$arch" = "Linux" ]]; then
   #TCLSH=/home/binops/afsi/ssm/sw/linux26-i686/bin/tclsh8.4
   TCLSH=/home/binops/afsi/ssm/domain2/linux26-i686/bin/wish8.5
else
   echo xflow_overview is only supported on Linux platforms
   exit
fi

function showhelp
{
print "
\t     Usage: xflow_overview [-h] [-noautomsg] [-suites suite_list]
\t\t        Where:
\t\t\t        -h : show help
\t\t\t        -noautomsg : turns off automatic alarm message display
\t\t\t        -suites suite_list : starts with given suites list file
"
}

[[ "$1" = --help || "$1" = -h ]] && showhelp && exit 0
arguments=$*
eval `cclargs_lite -D "" $0 \
  -noautomsg "0"                    "1"                           "[No Auto Message Display]" \
  -suites ""                    ""                           "[Suites List File]" \
  -as "" "" "[start application as another user]" \
  ++ $arguments 2>/dev/null`

if [[ "${SEQ_XFLOW_BIN}" = "" ]] ; then
   echo "xflow_overview getting maestro env from /home/binops/afsi/ssm/domain2"
   eval `ssmuse sh -d /home/binops/afsi/ssm/domain2`
   echo "which xflow_overview? $(which xflow_overview)"
fi

if [[ "${as}" != "" ]] ; then
   echo "xflow_overview switching ${USER} user to ${as}"
   if [ "${USER}" = "afsfops" -a '("${as}" = "afsipar" || "${as}" = "afsiops")' ] ; then
      sshCommandKey=${HOME}/.ssh/command_keys/maestro_${as}_key
      if [[ ! -f ${sshCommandKey} ]] ; then
         echo "xflow_overview Fatal Error: cannot find ssh command key ${sshCommandKey}" 
	 exit 1
      fi
      echo "xflow_overview command:\n echo ${0} ${arguments} | ssh -T -X -i ${sshCommandKey} ${as}@${TRUE_HOST}"
      # echo "${0} ${arguments}" | ssh -T -X -i /home/binops/afsf/ops/.ssh/command_keys/maestro_afsipar_key ${as}@${TRUE_HOST}
   fi
fi

test "${noautomsg}" = "1" && automsg_opt="-noautomsg" || automsg_opt=""
suites_opt=""
if [[ "${suites}" != "" ]] then
   print "\n suites file ${suites}"
   [[ ! -f ${suites} ]] && print "\nxflow_overview ERROR: file not found ${suites}" && exit 1
   suites_opt="-suites ${suites}"
fi

print "\n$TCLSH ${SEQ_XFLOW_BIN}/../lib/Overview.tcl ${automsg_opt} ${suites_opt}"
$TCLSH ${SEQ_XFLOW_BIN}/../lib/Overview.tcl ${automsg_opt} ${suites_opt}
