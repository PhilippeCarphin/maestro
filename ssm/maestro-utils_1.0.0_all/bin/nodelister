#!/bin/ksh
#CMOI_LEVEL usr
#CMOI_PLATFORM op_f
#
# Name: nodelister
#
# Author: CMOIS
#
# description: shows the latest listing of the node 
#
# usage: nodelister -n node [-l loopargs] -type [success,abort] -d datestamp -list        - shows all the possible listings (successful, aborted)
#        nodelister -h                                         - shows help
#        nodelister -n node -type [success,abort]              - shows the latest available listing (successful, aborted)
#        nodelister -n node -type [success,abort] -o outfile   - outputs the latest available listing (successful, aborted) to file outfile

Usage="
Nodelister  \n 
\n
\t     Shows the latest listing of the node \n
\n
\t     Usage: nodelister -n node [-l loopargs] [-type [success,abort]] [-list -o outfile]\n 
\n
\t\t        Where: \n
\t\t\t          node is the full node name. ex: /regional/assimilation/00/gen_cutoff \n
\t\t\t          loopargs is the comma-separated list of loop arguments. ex. outer_loop=1,inner_loop=2\n
\t\t\t          type defines whether to get the latest succesfull or aborted listing. Default is success.\n
\t\t\t          list shows all possible listings of the node.\n
\t\t\t          outfile is the output file where the output can be redirected.\n
\n
\t     Ex: \n
\t\t       nodelister -n node [-l loopargs] -type [success,abort] -d datestamp -list        - shows all the possible listings (successful, aborted)\n
\t\t       nodelister -h                                                       - shows help\n
\t\t       nodelister -n node -type [success,abort]                            - shows the latest available listing (successful, aborted)\n
\t\t       nodelister -n node -type [success,abort] -o outfile                 - outputs the latest available listing (successful, aborted) to file outfile\n
\n
\t     SEQ_EXP_HOME=$SEQ_EXP_HOME\n"

arguments=$*
eval `cclargs_lite $0 \
  -h        ""                    "1"                          "[Display help       ]" \
  -n        ""                    ""                           "[Node         ]" \
  -list     "0"                   "1"                          "[Show available listings            ]" \
  -type     "success"             "success"                    "[Show latest successful or aborted listing?  ]" \
  -l        ""                    ""                           "[Loop argument list ]" \
  -o        ""                    "/tmp/nodelister_$$"         "[Output listing to file    ]" \
  -d        ""                    ""                           "[datestamp value]" \
  ++ $arguments`

if [ ! -d "${SEQ_EXP_HOME}" ]; then
   echo "nodelister error: Invalid path SEQ_EXP_HOME=$SEQ_EXP_HOME"
   exit 1
fi
if [[ -n "${SEQ_BIN}" ]] ; then
   nodeinfo=${SEQ_BIN}/nodeinfo
else
   nodeinfo=$(which nodeinfo)
fi

if [[ $n == "" ]]; then
    echo "Node must be defined \n"
    echo $Usage
    exit 1
fi

if [[ $d == "" && ${list} == "0" ]]; then
    echo "Datestamp must be defined \n"
    echo $Usage
    exit 1
fi
datestamp=$d

if [[ $h != "" ]]; then
   echo $Usage
fi 

if [[ $l != "" ]]; then
   fullnode=`$nodeinfo -n $n -l $l -f node`
   fullnode=`echo $fullnode | cut -d "=" -f2`
   if [[ $fullnode = "" ]]; then
       echo nodeinfo reported a problem - exitting.
       exit 1
   fi
else
   fullnode=$n
fi

latest_dir=${SEQ_EXP_HOME}/listings/latest/

if [ "$type" != "abort" -a "$type" != "success" ]; then
   echo "type must be success or abort"
   exit 1
fi

if [[ $list -eq 1 ]]; then
   hostlist=$(ls -L ${SEQ_EXP_HOME}/listings | grep -wv latest | sed "s/\//\ /")
   for host in $hostlist ; do
      echo On $host
      ssh $host ls -alrt ${SEQ_EXP_HOME}/listings/$host/$fullnode.$type.gz.${datestamp}* 2>/dev/null 
   done
else 
       latestlink=$(ls -rt1 $latest_dir/$fullnode.${datestamp}.$type@* 2> /dev/null | tail -1)
       found=0
       if [[ ${latestlink} != "" ]]; then
          host=${latestlink##*@}
          scp $host:$latestlink /tmp/listing_$$.gz
          if [[ -e /tmp/listing_$$.gz ]]; then
	      found=1
              if [[ $o == "" ]]; then
                 gunzip -c /tmp/listing_$$.gz
              else
                 echo "Writing listing to $o"
                 gunzip -c /tmp/listing_$$.gz > $o 
              fi 
              rm -f /tmp/listing_$$.gz
          fi
       fi
       test $found == 0 && echo $fullnode $type 'listing not available'
fi
